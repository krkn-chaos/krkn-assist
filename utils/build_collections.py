from uuid import uuid4

import chromadb
from langchain_chroma import Chroma

# <!-- Generated by Claude Sonnet 4 -->


def load_or_create_chroma_collection(
    collection_name, embedding_model, all_splits, persist_dir="chroma_db"
):

    client = chromadb.PersistentClient(path=persist_dir)

    collection = client.get_or_create_collection(name=collection_name)

    vector_store = Chroma(
        client=client,
        collection_name=collection_name,
        embedding_function=embedding_model,
    )

    # Check if collection already has documents to avoid duplicates
    existing_count = collection.count()
    print(
        "Existing documents in collection "
        f"'{collection_name}': {existing_count}"
    )

    if existing_count == 0 and all_splits:
        add_docs_collection(all_splits, vector_store)
    elif existing_count > 0:
        if existing_count != len(all_splits):
            print(
                "Existing chroma collection doesn't match length of documents"
            )
            print("Deleting chroma collection and recreating")
            delete_chroma_collection(collection_name, persist_dir)
            client = chromadb.PersistentClient(path=persist_dir)

            collection = client.get_or_create_collection(name=collection_name)

            vector_store = Chroma(
                client=client,
                collection_name=collection_name,
                embedding_function=embedding_model,
            )
            add_docs_collection(all_splits, vector_store)

        else:
            print(
                f"Collection already contains {existing_count} documents. "
                "Skipping document addition."
            )
    else:
        print("No documents provided to add to collection.")

    return vector_store


def add_docs_collection(all_splits, vector_store):
    """Create a ChromaDB collection and its persistent data"""
    try:
        print(f"Adding {len(all_splits)} documents to ChromaDB collection...")
        uuids = [str(uuid4()) for _ in range(len(all_splits))]

        vector_store.add_documents(documents=all_splits, ids=uuids)
        print(f"Successfully added {len(all_splits)} documents to collection.")
        return vector_store
    except Exception as e:
        print(f"Error adding documents to collection: {e}")
        return False


def delete_chroma_collection(collection_name, persist_dir="chroma_db"):
    """Delete a ChromaDB collection and its persistent data"""
    try:
        client = chromadb.PersistentClient(path=persist_dir)
        client.delete_collection(name=collection_name)
        print(f"Successfully deleted collection '{collection_name}'")
        return True
    except Exception as e:
        print(f"Error deleting collection '{collection_name}': {e}")
        return False


def list_chroma_collections(persist_dir="chroma_db"):
    """List all ChromaDB collections"""
    try:
        client = chromadb.PersistentClient(path=persist_dir)
        collections = client.list_collections()
        print(f"Found {len(collections)} collections:")
        for collection in collections:
            count = collection.count()
            print(f"  - {collection.name}: {count} documents")
        return collections
    except Exception as e:
        print(f"Error listing collections: {e}")
        return []


def get_collection_stats(collection_name, persist_dir="chroma_db"):
    """Get statistics for a specific collection"""
    try:
        client = chromadb.PersistentClient(path=persist_dir)
        collection = client.get_collection(name=collection_name)
        count = collection.count()
        return {"name": collection_name, "document_count": count}
    except Exception as e:
        print(f"Error getting stats for collection '{collection_name}': {e}")
        return None
